{"version":3,"file":"my-chatbot-library.mjs","sources":["../../../projects/my-chatbot-library/src/lib/chatbot-icon/chatbot-icon.component.ts","../../../projects/my-chatbot-library/src/lib/chatbot-icon/chatbot-icon.component.html","../../../projects/my-chatbot-library/src/lib/directives/typing.directive.ts","../../../projects/my-chatbot-library/src/lib/chatbot-textbox/chatbot-textbox.component.ts","../../../projects/my-chatbot-library/src/lib/chatbot-textbox/chatbot-textbox.component.html","../../../projects/my-chatbot-library/src/lib/my-chatbot-library.component.ts","../../../projects/my-chatbot-library/src/lib/my-chatbot-library.component.html","../../../projects/my-chatbot-library/src/lib/interfaces/library.interface.ts","../../../projects/my-chatbot-library/src/public-api.ts","../../../projects/my-chatbot-library/src/my-chatbot-library.ts"],"sourcesContent":["import { Component, EventEmitter, Input, Output } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'lib-chatbot-icon',\r\n  standalone: true,\r\n  imports: [],\r\n  templateUrl: './chatbot-icon.component.html',\r\n  styleUrl: './chatbot-icon.component.css'\r\n})\r\nexport class ChatbotIconComponent {\r\n\r\n  @Input({required : true}) iconChatbot !: string;\r\n  @Output() chatbotClicked = new EventEmitter<void>();\r\n\r\n  onClickedChatbotIcon() : void\r\n  {\r\n    this.chatbotClicked.emit();\r\n  }\r\n\r\n}\r\n","<div class=\"chatbot-icon-container\">\r\n    <img [src]=\"iconChatbot\" class=\"svg-container\" alt=\"Chatbot icon\" (click)=\"onClickedChatbotIcon()\">\r\n</div>\r\n  ","import { Directive, ElementRef, Input, OnDestroy, OnInit, Renderer2 } from '@angular/core';\r\nimport { Subscription, interval, takeWhile } from 'rxjs';\r\n\r\n@Directive({\r\n  selector: '[libTyping]',\r\n  standalone: true\r\n})\r\nexport class TypingDirective implements OnInit , OnDestroy{\r\n\r\n  @Input({required : true}) text !: string;\r\n  @Input({required : false}) nativeContainer !: HTMLElement;\r\n\r\n  timer = interval(30);\r\n  timerSub !: Subscription;\r\n  index : number = 0;\r\n  \r\n  constructor(private el : ElementRef , private renderer : Renderer2) { }\r\n\r\n  ngOnInit(): void {\r\n    this._applyTypingEffect();\r\n  }\r\n\r\n  private _applyTypingEffect() : void\r\n  {\r\n    this.el.nativeElement.textContent = '';\r\n    this.timerSub = this.timer.pipe(\r\n      takeWhile(() => this.index <= this.text.length)\r\n    )\r\n    .subscribe(() =>{\r\n      this.el.nativeElement.textContent += this.text.charAt(this.index);\r\n      this.nativeContainer.scrollTop = this.nativeContainer.scrollHeight;\r\n      this.index = this.index +1;\r\n    });\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    if(this.timerSub)\r\n    {\r\n      this.timerSub.unsubscribe();\r\n    }\r\n  }\r\n\r\n}\r\n","import { Component, ElementRef, EventEmitter, Input, Output, ViewChild } from '@angular/core';\r\nimport { ChatbotIcons, ChatbotMsg, ChatbotRequest, ChatbotResponse } from '../interfaces/library.interface';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { NgClass, NgStyle } from '@angular/common';\r\nimport { TypingDirective } from '../directives/typing.directive';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { InputTextModule } from 'primeng/inputtext';\r\n\r\n@Component({\r\n  selector: 'lib-chatbot-textbox',\r\n  standalone: true,\r\n  imports: [NgStyle, NgClass, TypingDirective , FormsModule , InputTextModule],\r\n  templateUrl: './chatbot-textbox.component.html',\r\n  styleUrl: './chatbot-textbox.component.css'\r\n})\r\nexport class ChatbotTextboxComponent {\r\n\r\n  @ViewChild('bodyChatbotContainer' , {static : false}) bodyContainer !: ElementRef;\r\n\r\n  @Input({required : true}) icons !: ChatbotIcons;\r\n  @Input({required : true}) basePath !: string;\r\n  @Output() closeChatbot = new EventEmitter<void>();\r\n\r\n  readonly welcomeMessage : string = 'Hello I\\'m Manu your virtual assistant. How can I help you?'\r\n  readonly errorMessage : string = 'Something went wront. Please try later';\r\n  inputText : string | undefined;\r\n  waitingResponse : boolean = false;\r\n  errorResponse : boolean = false;\r\n  listOfMessages : ChatbotMsg[] = \r\n  [ \r\n    {role : 'assistant' , content : this.welcomeMessage} \r\n  ];\r\n\r\n  constructor(private http : HttpClient){}\r\n\r\n  getIcon(ind : number) : string\r\n  {\r\n    return (ind == 0 || ind % 2 == 0) ?  this.icons.chatbotIcon : this.icons.userIcon\r\n  }\r\n\r\n  onCloseChatbot() : void\r\n  {\r\n    this.closeChatbot.emit();\r\n  }\r\n\r\n  onSendForm() : void\r\n  {\r\n    if(this.inputText !=undefined)\r\n    {\r\n      this.listOfMessages.push({role : 'user' , content : <string>this.inputText});\r\n      this.inputText = undefined;\r\n      this.waitingResponse = true;\r\n      //Remove the welcome message\r\n      const request : ChatbotRequest = {model : \"gpt-3.5-turbo\" , messages : this.listOfMessages.slice(1)};\r\n      //Do the call\r\n      this.http.post<ChatbotResponse>(this.basePath , request)\r\n      .subscribe({\r\n        next : (res : ChatbotResponse) =>{\r\n          this.waitingResponse = false;\r\n          if(res.content)\r\n          {\r\n            this.listOfMessages.push({role : 'assistant' , content : res.content});\r\n          }\r\n        },\r\n        error : (err : any) =>{\r\n          this.waitingResponse = false;\r\n          this.errorResponse = true;\r\n          this.listOfMessages.push({role : 'assistant' , content : this.errorMessage});\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n}\r\n","<div class=\"header\">\r\n    <p class=\"header-text\">My chatbot title</p>\r\n    <span class=\"icon-right\"\r\n    (click)=\"onCloseChatbot()\">\r\n      <i class=\"pi pi-times\"></i>\r\n    </span>\r\n  </div>\r\n  \r\n  <div #bodyChatbotContainer \r\n  class=\"body\">\r\n  \r\n  \r\n    @for (chat of  listOfMessages ; track chat; let index=$index )\r\n    {\r\n      <div class=\"chat-container-message\"\r\n      [ngStyle]=\"{'flex-direction': index === 0 || index % 2 === 0 ? 'row' : 'row-reverse'}\"\r\n      >\r\n        <img [src]=\"getIcon(index)\" class=\"svg-container\" alt=\"\" \r\n        [ngClass]=\"index === 0 || index % 2 === 0 ? 'chatbot-icon' : 'user-icon' \" >\r\n        @if(index == 0)\r\n        {\r\n          <p class=\"chatbot-text chat-message\">{{chat.content}}</p>\r\n        }@else {\r\n          @if (index % 2 == 0) {\r\n            <p libTyping [text]=\"chat.content\"\r\n            [ngClass]=\"errorResponse ? 'chat-error' : 'chat-message' \"\r\n            [nativeContainer]=\"bodyChatbotContainer\"\r\n            class=\"chatbot-text\">\r\n              {{chat.content}}\r\n            </p>          \r\n          } @else {\r\n            <p class=\"chatbot-text user-message\">{{chat.content}}</p>\r\n          }\r\n  \r\n        }\r\n      </div>\r\n    }\r\n  \r\n    @if(waitingResponse)\r\n    {  \r\n      <div class=\"chat-container-message\">\r\n        <img [src]=\"icons.chatbotIcon\" class=\"svg-container chatbot-icon\" alt=\"\">\r\n        <div class=\"spinner\">\r\n          <div class=\"bounce1\"></div>\r\n          <div class=\"bounce2\"></div>\r\n          <div class=\"bounce3\"></div>\r\n        </div>\r\n      </div>\r\n    }\r\n  \r\n  </div>\r\n  \r\n  <hr class=\"horizontal-line\">\r\n  <div class=\"footer\">\r\n  \r\n    <input type=\"text\" pInputText\r\n    placeholder=\"Write here your message...\"\r\n    [disabled]=\"waitingResponse\"\r\n    [style]=\"{'border-radius' : '20px' , 'font-size' : 'small' , 'width' : '85%'}\"\r\n    [(ngModel)]=\"inputText\"\r\n    (keydown.enter)=\"onSendForm()\"\r\n    />\r\n  \r\n    <div class=\"send-icon-container\"\r\n    [class.disabled-icon]=\"!inputText\"\r\n    (click)=\"onSendForm()\">\r\n      <i class=\"pi pi-send\"></i>\r\n    </div>\r\n  \r\n  </div>\r\n  \r\n  \r\n  ","import { Component, Input, OnDestroy } from '@angular/core';\r\nimport { ChatbotIcons } from './interfaces/library.interface';\r\nimport { Subscription, filter, fromEvent } from 'rxjs';\r\nimport { ChatbotIconComponent } from './chatbot-icon/chatbot-icon.component';\r\nimport { ChatbotTextboxComponent } from './chatbot-textbox/chatbot-textbox.component';\r\n\r\n@Component({\r\n  selector: 'lib-my-chatbot-library',\r\n  standalone: true,\r\n  imports: [ChatbotIconComponent , ChatbotTextboxComponent],\r\n  templateUrl: './my-chatbot-library.component.html',\r\n  styleUrl: './my-chatbot-library.component.css'\r\n})\r\nexport class MyChatbotLibraryComponent implements OnDestroy{\r\n\r\n  @Input({required : true}) icons !: ChatbotIcons;\r\n  @Input({required : true}) basePath !: string;\r\n\r\n  showTextBox : boolean = false;\r\n\r\n  readonly keyDownEvent$ = fromEvent<KeyboardEvent>(document , 'keydown');\r\n  private keyInputSub !: Subscription;\r\n\r\n  ngOnDestroy(): void {\r\n    if(this.keyInputSub)\r\n    {\r\n      this.keyInputSub.unsubscribe();\r\n    }\r\n  }\r\n\r\n  //Method called whenever the chatbot icon is clicked\r\n  onChatbotClicked() : void\r\n  {\r\n    this.showTextBox = true;\r\n    this._subscribeToKeydownEvent();\r\n  }\r\n\r\n  onCloseChatbot() : void\r\n  {\r\n    this.showTextBox = false;\r\n  }\r\n\r\n  private _subscribeToKeydownEvent() : void\r\n  {\r\n    this.keyInputSub = this.keyDownEvent$.\r\n    pipe\r\n    (\r\n      filter(event => event.key ==='Escape')\r\n    )\r\n    .subscribe(() =>{\r\n      this.showTextBox = false;\r\n      this.keyInputSub.unsubscribe();\r\n    });\r\n  }\r\n\r\n}\r\n","@if (!showTextBox){\r\n    <lib-chatbot-icon [iconChatbot]=\"icons.chatbotIcon\"\r\n    (chatbotClicked)=\"onChatbotClicked()\"\r\n    ></lib-chatbot-icon>\r\n}@else {\r\n    <lib-chatbot-textbox \r\n    [icons]=\"icons\"\r\n    [basePath]=\"basePath\"\r\n    (closeChatbot)=\"onCloseChatbot()\"\r\n    ></lib-chatbot-textbox>\r\n}\r\n  \r\n  ","export interface ChatbotIcons\r\n{\r\n  chatbotIcon : string,\r\n  userIcon : string\r\n};\r\n\r\nexport interface ChatbotRequest\r\n{\r\n  model : string,\r\n  messages : ChatbotMsg[]\r\n};\r\n\r\nexport interface ChatbotMsg\r\n{\r\n  role : 'assistant' | 'user',\r\n  content : string\r\n};\r\n\r\nexport interface ChatbotResponse\r\n{\r\n  role : 'assistant',\r\n  content : string\r\n};\r\nr\n * Public API Surface of my-chatbot-library\r\n */\r\n\r\nexport * from './lib/my-chatbot-library.component';\r\nexport * from './lib/interfaces/library.interface';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}